name: 构建和发布

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: WarpGo-manager/package-lock.json

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 缓存 Rust 依赖
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          WarpGo-manager/src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 安装 Linux 依赖
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: 安装前端依赖
      working-directory: WarpGo-manager
      run: npm ci

    - name: 安装 Tauri CLI
      working-directory: WarpGo-manager
      run: npm install -g @tauri-apps/cli

    - name: 构建应用
      working-directory: WarpGo-manager
      run: npm run tauri build

    - name: 上传构建产物 (Ubuntu)
      if: matrix.platform == 'ubuntu-20.04'
      uses: actions/upload-artifact@v3
      with:
        name: linux-build
        path: |
          WarpGo-manager/src-tauri/target/release/bundle/appimage/*.AppImage
          WarpGo-manager/src-tauri/target/release/bundle/deb/*.deb

    - name: 上传构建产物 (Windows)
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: |
          WarpGo-manager/src-tauri/target/release/bundle/msi/*.msi
          WarpGo-manager/src-tauri/target/release/bundle/nsis/*.exe

    - name: 上传构建产物 (macOS)
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: macos-build
        path: |
          WarpGo-manager/src-tauri/target/release/bundle/dmg/*.dmg
          WarpGo-manager/src-tauri/target/release/bundle/macos/*.app

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v3

    - name: 发布到 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          linux-build/*
          windows-build/*
          macos-build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
